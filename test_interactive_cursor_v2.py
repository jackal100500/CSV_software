# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫—É—Ä—Å–æ—Ä–∞ –¥–ª—è Multi-Parameter Data Analyzer v2.0
================================================================

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
- –ü–∞–Ω–µ–ª—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º
- –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Å–∏ Y –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
- –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è –∫—É—Ä—Å–æ—Ä–∞
- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏

–ê–≤—Ç–æ—Ä: j15
–í–µ—Ä—Å–∏—è: 2.0.0-dev
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π v2.0
from core.data_manager import DataManager
from core.timeline_manager_v2 import TimelineManager
from core.plot_manager import PlotManager
from utils.interpolation import InterpolationEngine
from utils.file_utils import FileUtils

def test_interactive_cursor():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∫—É—Ä—Å–æ—Ä–∞"""
    
    print("üéØ –¢–ï–°–¢ –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–û–ì–û –ö–£–†–°–û–†–ê v2.0")
    print("=" * 50)
    
    try:
        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        print("1Ô∏è‚É£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π...")
        data_manager = DataManager()
        timeline_manager = TimelineManager()
        plot_manager = PlotManager()
        
        # 2. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        print("2Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∫–∞ test.xlsx...")
        df = FileUtils.load_data_file("test.xlsx")
        data_manager.set_dataframe(df, "test.xlsx")
        data_manager.analyze_columns()
        
        time_columns = data_manager.get_time_candidates()
        numeric_columns = data_manager.get_numeric_columns()
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–µ—Ä–≤—ã–µ 3)
        pairs = []
        for i in range(min(3, len(time_columns), len(numeric_columns))):
            pairs.append((time_columns[i], numeric_columns[i]))
        
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –ø–∞—Ä—ã: {pairs}")
        
        # 3. –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã
        print("3Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã...")
        universal_timeline = timeline_manager.create_universal_timeline(df, pairs)
        
        # 4. –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è
        print("4Ô∏è‚É£ –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...")
        interpolated_data = {}
        for time_col, param_col in pairs:
            time_series = df[time_col].dropna()
            param_series = df[param_col].dropna()
            
            interpolation_engine = InterpolationEngine()
            interpolated = interpolation_engine.interpolate_to_timeline(
                time_series, param_series, universal_timeline, method='linear'
            )
            interpolated_data[param_col] = interpolated
        
        # 5. –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
        print("5Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞...")
        
        fig, ax = plt.subplots(figsize=(14, 10))
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –æ—Å—è–º–∏ Y
        axes_list = plot_manager.plot_interpolated_data(
            ax, universal_timeline, interpolated_data,
            enable_multiple_y_axes=True
        )
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –æ—Å–µ–π: {len(axes_list)}")
        print("üìä –ö–∞–∂–¥—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–º–µ–µ—Ç —Å–≤–æ—é –æ—Å—å Y")
        
        # 6. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        print("6Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫—É—Ä—Å–æ—Ä–∞...")
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫—É—Ä—Å–æ—Ä–∞
        cursor_line = None
        param_info_text = None
        
        def on_mouse_move(event):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏"""
            nonlocal cursor_line, param_info_text
            
            if not event.inaxes:
                return
                
            x, y = event.xdata, event.ydata
            if x is None or y is None:
                return
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –ª–∏–Ω–∏—é –∫—É—Ä—Å–æ—Ä–∞
            if cursor_line is not None:
                cursor_line.remove()
            
            # –†–∏—Å—É–µ–º –Ω–æ–≤—É—é —Å–µ—Ä—É—é –ø—É–Ω–∫—Ç–∏—Ä–Ω—É—é –ª–∏–Ω–∏—é
            cursor_line = ax.axvline(x=x, color='gray', linestyle='--', 
                                   linewidth=1.5, alpha=0.8)
            
            # –ù–∞—Ö–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ —ç—Ç–æ–π —Ç–æ—á–∫–µ
            try:
                import matplotlib.dates as mdates
                cursor_time = mdates.num2date(x)
                
                # –ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–π –∏–Ω–¥–µ–∫—Å
                time_series = pd.Series(universal_timeline)
                time_diffs = abs(time_series - cursor_time)
                closest_idx = time_diffs.idxmin()
                
                # –°–æ–±–∏—Ä–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                param_values = []
                for param_name in interpolated_data.keys():
                    if closest_idx < len(interpolated_data[param_name]):
                        value = interpolated_data[param_name].iloc[closest_idx]
                        if pd.notna(value):
                            param_values.append(f"{param_name}: {value:.3f}")
                        else:
                            param_values.append(f"{param_name}: –Ω/–¥")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                time_str = cursor_time.strftime('%H:%M:%S %d.%m.%y')
                info_text = f"–í—Ä–µ–º—è: {time_str}   |   " + "   |   ".join(param_values)
                ax.set_title(info_text, fontsize=10, pad=20)
                
            except Exception as e:
                ax.set_title(f"X: {x:.2f}, Y: {y:.2f}", fontsize=10, pad=20)
            
            plt.draw()
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏—è
        fig.canvas.mpl_connect('motion_notify_event', on_mouse_move)
        
        # 7. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        print("7Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞...")
        
        plt.savefig("interactive_cursor_test_v2.png", dpi=150, bbox_inches='tight')
        print("üíæ –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: interactive_cursor_test_v2.png")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
        plt.title("Multi-Parameter Interactive Cursor Test v2.0\n–î–≤–∏–≥–∞–π—Ç–µ –º—ã—à—å—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π", 
                 fontsize=12, fontweight='bold')
        
        print("\nüéâ –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –ö–£–†–°–û–† –ì–û–¢–û–í!")
        print("‚úÖ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Å–∏ Y: –ö–∞–∂–¥—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–∞ —Å–≤–æ–µ–π –æ—Å–∏")
        print("‚úÖ –°–µ—Ä–∞—è –ø—É–Ω–∫—Ç–∏—Ä–Ω–∞—è –ª–∏–Ω–∏—è: –°–ª–µ–¥—É–µ—Ç –∑–∞ –∫—É—Ä—Å–æ—Ä–æ–º –º—ã—à–∏")
        print("‚úÖ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π: –í –∑–∞–≥–æ–ª–æ–≤–∫–µ –≥—Ä–∞—Ñ–∏–∫–∞")
        print("‚úÖ –ì–æ—Ç–æ–≤–æ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ GUI")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ (–µ—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ)
        if __name__ == "__main__":
            print("\nüëÄ –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫...")
            print("   –î–≤–∏–≥–∞–π—Ç–µ –º—ã—à—å—é –ø–æ –≥—Ä–∞—Ñ–∏–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!")
            plt.show()
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_interactive_cursor()
    sys.exit(0 if success else 1)
