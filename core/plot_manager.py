# -*- coding: utf-8 -*-
"""
Plot Manager –¥–ª—è Multi-Parameter Data Analyzer v2.0
===================================================

–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≥—Ä–∞—Ñ–∏–∫–æ–≤.

–°–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:
- ../ui/main_window.py: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å matplotlib –≤ tkinter
- timeline_manager.py: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã
- data_manager.py: –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è
- ../config/settings.py: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∏–ª–µ–π –∏ —Ü–≤–µ—Ç–æ–≤ –≥—Ä–∞—Ñ–∏–∫–æ–≤

–§—É–Ω–∫—Ü–∏–∏ v2.0:
- –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª–æ–π
- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª—è–º–∏ –∏ —Ü–≤–µ—Ç–∞–º–∏
- –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–∞—è —Å–µ—Ç–∫–∞ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è

–ê–≤—Ç–æ—Ä: j15
–í–µ—Ä—Å–∏—è: 2.0.0-dev
GitHub: https://github.com/jackal100500/CSV_software
"""

import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from matplotlib.figure import Figure
from matplotlib.axes import Axes
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from typing import List, Tuple, Dict, Optional, Any
import logging


class PlotManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è –º–Ω–æ–≥–æ–ø–∞—Ä–∞–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö.
    
    –°–≤—è–∑–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
    - main_window: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å matplotlib canvas (ui/main_window.py)
    - timeline_manager: –ò—Å—Ç–æ—á–Ω–∏–∫ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã (timeline_manager.py)
    - data_manager: –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (data_manager.py)
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.colors = ['blue', 'red', 'green', 'orange', 'purple', 'brown', 'pink', 'gray']
        self.line_styles = ['-', '--', '-.', ':']
        self.marker_styles = ['o', 's', '^', 'v', 'D', '*', '+', 'x']
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–∫–∏ –∏ –æ—Å–µ–π
        self.grid_alpha = 0.3
        self.legend_loc = 'best'
        self.date_format = '%H:%M:%S'
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.logger = logging.getLogger(__name__)
        
        print("PlotManager v2.0 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print("–°–≤—è–∑–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏:")
        print("- main_window.py: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å tkinter")
        print("- timeline_manager.py: –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è —à–∫–∞–ª–∞")
    
    def plot_interpolated_data(self, ax: Axes, universal_timeline: pd.Series, 
                             interpolated_data: Dict[str, pd.Series],
                             enable_multiple_y_axes: bool = True):
        """
        –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Å –∏–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª–µ
        
        Args:
            ax: Matplotlib Axes –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è
            universal_timeline: –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è —à–∫–∞–ª–∞ –∏–∑ timeline_manager
            interpolated_data: –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã {param_name: values}
            enable_multiple_y_axes: –°–æ–∑–¥–∞–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—É—é –æ—Å—å Y –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
            
        Returns:
            List[Axes]: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ—Å–µ–π (–æ—Å–Ω–æ–≤–Ω–∞—è + –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ)
        """
        ax.clear()
        if universal_timeline is None or not interpolated_data:
            ax.text(0.5, 0.5, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è', 
                   transform=ax.transAxes, ha='center', va='center',
                   fontsize=14, color='red')
            return [ax]
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ—Å–∏
        time_values = universal_timeline
        if not isinstance(time_values, pd.DatetimeIndex):
            if hasattr(time_values, 'iloc') and len(time_values) > 0:
                first_element = time_values.iloc[0] if hasattr(time_values, 'iloc') else time_values[0]
                if not isinstance(first_element, datetime):
                    try:
                        time_values = pd.to_datetime(time_values)
                    except Exception:
                        pass
            else:
                try:
                    time_values = pd.to_datetime(time_values)
                except Exception:
                    pass
        # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –æ—Å—è–º–∏ Y
        axes_list = [ax]  # –û—Å–Ω–æ–≤–Ω–∞—è –æ—Å—å
        param_names = list(interpolated_data.keys())
        for i, (param_name, param_values) in enumerate(interpolated_data.items()):
            if param_values is None or len(param_values) == 0:
                continue
            color = self.colors[i % len(self.colors)]
            if enable_multiple_y_axes and i > 0:
                current_ax = ax.twinx()
                offset = 60 * (i - 1)
                current_ax.spines['right'].set_position(('outward', offset))
                current_ax.set_ylabel(param_name, color=color, fontsize=10, fontweight='bold')
                current_ax.tick_params(axis='y', colors=color, labelsize=9)
                current_ax.spines['right'].set_color(color)
                axes_list.append(current_ax)
            else:
                current_ax = ax
                if enable_multiple_y_axes:
                    current_ax.set_ylabel(param_name, color=color, fontsize=10, fontweight='bold')
                    current_ax.tick_params(axis='y', colors=color, labelsize=9)
            valid_mask = ~pd.isna(param_values)
            if valid_mask.any():
                valid_time = time_values[valid_mask]
                valid_values = param_values[valid_mask]
                current_ax.plot(valid_time, valid_values, 
                              color=color, linewidth=1.5,
                              label=param_name, alpha=0.8)
                if enable_multiple_y_axes and len(valid_values) > 0:
                    y_margin = (valid_values.max() - valid_values.min()) * 0.1
                    current_ax.set_ylim(valid_values.min() - y_margin, 
                                       valid_values.max() + y_margin)
                print(f"  üìà {param_name}: {len(valid_values)} —Ç–æ—á–µ–∫, —Ü–≤–µ—Ç {color}")
            else:
                print(f"  ‚ö†Ô∏è {param_name}: –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        self.setup_plot_appearance(ax, time_values)
        print(f"–ü–æ—Å—Ç—Ä–æ–µ–Ω –≥—Ä–∞—Ñ–∏–∫ —Å {len(interpolated_data)} –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –Ω–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª–µ")
        return axes_list
    
    def plot_raw_data(self, ax: Axes, df: pd.DataFrame, pairs: List[Tuple[str, str]]):
        """
        –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (—Ä–µ–∂–∏–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å v1.0)
        
        Args:
            ax: Matplotlib Axes –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è
            df: –ò—Å—Ö–æ–¥–Ω—ã–π DataFrame
            pairs: –ü–∞—Ä—ã (time_column, param_column)
            
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤:
        - main_window.plot_data(): –ö–æ–≥–¥–∞ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞
        """
        ax.clear()
        
        if df is None or not pairs:
            ax.text(0.5, 0.5, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è', 
                   transform=ax.transAxes, ha='center', va='center',
                   fontsize=14, color='red')
            return
        
        color_idx = 0
        all_time_values = []
        
        # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã –æ—Ç–¥–µ–ª—å–Ω–æ
        for time_col, param_col in pairs:
            try:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä—ã
                time_data = df[time_col].dropna()
                param_data = df[param_col].dropna()
                
                # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ –∏–Ω–¥–µ–∫—Å—É (–ø—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥)
                common_index = time_data.index.intersection(param_data.index)
                if len(common_index) == 0:
                    continue
                
                sync_time = time_data.loc[common_index]
                sync_param = param_data.loc[common_index]
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏
                try:
                    sync_time = pd.to_datetime(sync_time)
                    all_time_values.extend(sync_time.tolist())
                except Exception:
                    # –ï—Å–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
                    all_time_values.extend(sync_time.tolist())
                
                # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ª–∏–Ω–∏–∏
                color = self.colors[color_idx % len(self.colors)]
                ax.plot(sync_time, sync_param, 
                       color=color, label=f"{param_col} ({time_col})", 
                       linewidth=1.5, alpha=0.8)
                
                color_idx += 1
                
            except Exception as e:
                self.logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–∞—Ä—ã {time_col}-{param_col}: {e}")
                continue
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π
        if all_time_values:
            self.setup_plot_appearance(ax, pd.Series(all_time_values))
        else:
            ax.text(0.5, 0.5, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞', 
                   transform=ax.transAxes, ha='center', va='center',
                   fontsize=12, color='orange')
        
        print(f"–ü–æ—Å—Ç—Ä–æ–µ–Ω –≥—Ä–∞—Ñ–∏–∫ –≤ —Ä–µ–∂–∏–º–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å {len(pairs)} –ø–∞—Ä–∞–º–∏")
    
    def setup_plot_appearance(self, ax: Axes, time_values: pd.Series):
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –≥—Ä–∞—Ñ–∏–∫–∞
        
        Args:
            ax: Matplotlib Axes
            time_values: –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Å–∏ X
            
        –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç:
        - –°–µ—Ç–∫—É –∏ —Å—Ç–∏–ª–∏
        - –§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ—Å–∏
        - –õ–µ–≥–µ–Ω–¥—É –∏ –ø–æ–¥–ø–∏—Å–∏
        """
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏
        ax.grid(True, alpha=self.grid_alpha, linestyle='-', linewidth=0.5)
        ax.grid(True, alpha=self.grid_alpha/2, linestyle=':', linewidth=0.3, which='minor')        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ—Å–∏
        if len(time_values) > 0:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ time_values
            first_element = None
            if isinstance(time_values, pd.DatetimeIndex):
                first_element = time_values[0]
            elif hasattr(time_values, 'iloc'):
                first_element = time_values.iloc[0]
            else:
                first_element = time_values[0]
                
            if isinstance(first_element, datetime):
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞
                time_range = time_values.max() - time_values.min()
                
                if time_range <= timedelta(hours=1):
                    # –î–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –¥–æ —á–∞—Å–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—É–Ω–¥—ã
                    ax.xaxis.set_major_formatter(mdates.DateFormatter('%H:%M:%S'))
                    ax.xaxis.set_major_locator(mdates.MinuteLocator(interval=1))
                elif time_range <= timedelta(days=1):
                    # –î–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –¥–æ –¥–Ω—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∏–Ω—É—Ç—ã
                    ax.xaxis.set_major_formatter(mdates.DateFormatter('%H:%M'))
                    ax.xaxis.set_major_locator(mdates.HourLocator(interval=1))
                else:
                    # –î–ª—è –±–æ–ª—å—à–∏—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–Ω–∏
                    ax.xaxis.set_major_formatter(mdates.DateFormatter('%d.%m %H:%M'))
                    ax.xaxis.set_major_locator(mdates.DayLocator(interval=1))
                
                # –ü–æ–≤–æ—Ä–æ—Ç –ø–æ–¥–ø–∏—Å–µ–π –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                plt.setp(ax.xaxis.get_majorticklabels(), rotation=45, ha='right')
        
        # –ü–æ–¥–ø–∏—Å–∏ –æ—Å–µ–π
        ax.set_xlabel('–í—Ä–µ–º—è', fontsize=12, fontweight='bold')
        ax.set_ylabel('–ó–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤', fontsize=12, fontweight='bold')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–µ–≥–µ–Ω–¥—ã
        if ax.get_legend_handles_labels()[0]:  # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–µ–≥–µ–Ω–¥—ã
            legend = ax.legend(loc=self.legend_loc, frameon=True, 
                             fancybox=True, shadow=True, ncol=1)
            legend.get_frame().set_alpha(0.9)
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
        ax.autoscale(enable=True, axis='both', tight=True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        ax.set_title('Multi-Parameter Data Analysis v2.0', 
                    fontsize=14, fontweight='bold', pad=20)
    
    def add_cursor_line(self, ax: Axes, x_position: float):
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏ –∫—É—Ä—Å–æ—Ä–∞
        
        Args:
            ax: Matplotlib Axes
            x_position: –ü–æ–∑–∏—Ü–∏—è –∫—É—Ä—Å–æ—Ä–∞ –ø–æ –æ—Å–∏ X
            
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤:
        - main_window.on_mouse_move(): –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –º—ã—à–∏
        """
        # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ª–∏–Ω–∏–π –∫—É—Ä—Å–æ—Ä–∞
        for line in ax.lines:
            if hasattr(line, '_cursor_line'):
                line.remove()
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ª–∏–Ω–∏–∏ –∫—É—Ä—Å–æ—Ä–∞
        cursor_line = ax.axvline(x=x_position, color='black', 
                               linestyle='--', alpha=0.7, linewidth=1)
        cursor_line._cursor_line = True  # –ú–∞—Ä–∫–µ—Ä –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    
    def set_zoom_region(self, ax: Axes, x_min: float, x_max: float, 
                       y_min: Optional[float] = None, y_max: Optional[float] = None):
        """
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±–ª–∞—Å—Ç–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        
        Args:
            ax: Matplotlib Axes
            x_min, x_max: –ì—Ä–∞–Ω–∏—Ü—ã –ø–æ –æ—Å–∏ X
            y_min, y_max: –ì—Ä–∞–Ω–∏—Ü—ã –ø–æ –æ—Å–∏ Y (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤:
        - main_window.on_mouse_scroll(): –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ª–µ—Å–æ–º –º—ã—à–∏
        """
        ax.set_xlim(x_min, x_max)
        
        if y_min is not None and y_max is not None:
            ax.set_ylim(y_min, y_max)
        else:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ Y –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö X
            ax.relim()
            ax.autoscale_view(scalex=False, scaley=True)
    
    def export_plot(self, ax: Axes, filename: str, dpi: int = 300):
        """
        –≠–∫—Å–ø–æ—Ä—Ç –≥—Ä–∞—Ñ–∏–∫–∞ –≤ —Ñ–∞–π–ª
        
        Args:
            ax: Matplotlib Axes
            filename: –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            dpi: –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
        - PNG, JPG, PDF, SVG
        """
        try:
            fig = ax.get_figure()
            fig.savefig(filename, dpi=dpi, bbox_inches='tight', 
                       facecolor='white', edgecolor='none')
            print(f"–ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
            return True
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
            return False
    
    def get_plot_statistics(self, interpolated_data: Dict[str, pd.Series]) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
        
        Args:
            interpolated_data: –î–∞–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∞
            
        Returns:
            Dict: –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤:
        - main_window.py: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä–∞—Ñ–∏–∫–µ
        """
        stats = {
            'parameters_count': len(interpolated_data),
            'total_points': 0,
            'parameter_stats': {}
        }
        
        for param_name, param_values in interpolated_data.items():
            if param_values is not None:
                valid_values = param_values.dropna()
                
                param_stat = {
                    'points': len(valid_values),
                    'min': valid_values.min() if len(valid_values) > 0 else None,
                    'max': valid_values.max() if len(valid_values) > 0 else None,
                    'mean': valid_values.mean() if len(valid_values) > 0 else None,
                    'std': valid_values.std() if len(valid_values) > 0 else None
                }
                
                stats['parameter_stats'][param_name] = param_stat
                stats['total_points'] += len(valid_values)
        
        return stats
    
    def clear_plot(self, ax: Axes):
        """
        –û—á–∏—Å—Ç–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
        
        Args:
            ax: Matplotlib Axes –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        """
        ax.clear()
        ax.text(0.5, 0.5, '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è', 
               transform=ax.transAxes, ha='center', va='center',
               fontsize=12, color='gray', style='italic')
        
        # –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É—Å—Ç–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
        ax.set_xlabel('–í—Ä–µ–º—è')
        ax.set_ylabel('–ó–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤')
        ax.set_title('Multi-Parameter Data Analyzer v2.0')
        ax.grid(True, alpha=0.3)


# –°–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö:
# from core.plot_manager import PlotManager
