# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è Multi-Parameter Data Analyzer v2.0
============================================================================

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
- –ó–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ test.xlsx
- –°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã
- –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö
- –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ DatetimeIndex

–ê–≤—Ç–æ—Ä: j15
–í–µ—Ä—Å–∏—è: 2.0.0-dev
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π v2.0
from core.data_manager import DataManager
from core.timeline_manager_v2 import TimelineManager
from core.plot_manager import PlotManager
from utils.interpolation import InterpolationEngine
from utils.file_utils import FileUtils

def test_plotting_functionality():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
    
    print("üß™ –¢–ï–°–¢ –ü–û–°–¢–†–û–ï–ù–ò–Ø –ì–†–ê–§–ò–ö–û–í v2.0")
    print("=" * 50)
    
    try:
        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        print("1Ô∏è‚É£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        data_manager = DataManager()
        timeline_manager = TimelineManager()
        plot_manager = PlotManager()
        interpolation_engine = InterpolationEngine()
          # 2. –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        print("2Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∫–∞ test.xlsx...")
        file_path = "test.xlsx"
        if not os.path.exists(file_path):
            print("‚ùå –§–∞–π–ª test.xlsx –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return False        # –ò—Å–ø–æ–ª—å–∑—É–µ–º file_utils –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        df = FileUtils.load_data_file(file_path)
        data_manager.set_dataframe(df, file_path)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä
        data_manager.analyze_columns()
        time_columns = data_manager.get_time_candidates()
        numeric_columns = data_manager.get_numeric_columns()
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—ã –∫–æ–ª–æ–Ω–æ–∫ (–≤—Ä–µ–º—è-–ø–∞—Ä–∞–º–µ—Ç—Ä)
        pairs = []
        for i, time_col in enumerate(time_columns):
            if i < len(numeric_columns):
                pairs.append((time_col, numeric_columns[i]))
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {len(df)} —Å—Ç—Ä–æ–∫, {len(pairs)} –ø–∞—Ä –∫–æ–ª–æ–Ω–æ–∫")
        print(f"üìä –ü–∞—Ä—ã: {pairs}")
        
        # 3. –°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã
        print("3Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã...")
        universal_timeline = timeline_manager.create_universal_timeline(df, pairs)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(universal_timeline)} —Ç–æ—á–µ–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã")
        print(f"üìÖ –û—Ç {universal_timeline.min()} –¥–æ {universal_timeline.max()}")
          # 4. –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        print("4Ô∏è‚É£ –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –ø–∞—Ä—É –æ—Ç–¥–µ–ª—å–Ω–æ
        interpolated_data = {}
        for time_col, param_col in pairs[:3]:  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –ø–∞—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∞
            try:
                time_series = df[time_col].dropna()
                param_series = df[param_col].dropna()
                
                # –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º –∫ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª–µ
                interpolated = interpolation_engine.interpolate_to_timeline(
                    time_series, param_series, universal_timeline, method='linear'
                )
                interpolated_data[param_col] = interpolated
                print(f"  ‚úÖ {param_col}: {len(interpolated)} —Ç–æ—á–µ–∫")
                
            except Exception as e:
                print(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ {param_col}: {e}")
                
        print(f"‚úÖ –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä–æ–≤–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {len(interpolated_data)} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        
        # 5. –¢–µ—Å—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
        print("5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ñ–∏–≥—É—Ä—É
        fig, ax = plt.subplots(figsize=(12, 8))
        
        # –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        plot_data = {}
        for param_name, param_data in interpolated_data.items():
            if len(param_data) > 0:
                plot_data[param_name] = param_data
                  # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
        try:
            plot_manager.plot_interpolated_data(ax, universal_timeline, plot_data)
            print("‚úÖ –ì—Ä–∞—Ñ–∏–∫ –ø–æ—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫
            test_output = "test_plot_v2.png"
            plt.savefig(test_output, dpi=150, bbox_inches='tight')
            print(f"üíæ –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {test_output}")
            
            plt.close()
            
        except Exception as plot_error:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {plot_error}")
            import traceback
            traceback.print_exc()
            return False
            
        # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ DatetimeIndex
        print("6Ô∏è‚É£ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ DatetimeIndex...")
          # –°–æ–∑–¥–∞–µ–º DatetimeIndex –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        test_timeline = pd.date_range(start='2024-01-01', periods=100, freq='s')
        test_data = {'test_param': pd.Series(range(100), index=test_timeline)}
        
        fig2, ax2 = plt.subplots(figsize=(10, 6))
        try:
            plot_manager.plot_interpolated_data(ax2, test_timeline, test_data)
            print("‚úÖ DatetimeIndex –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            plt.close()
        except Exception as dt_error:
            print(f"‚ùå –û—à–∏–±–∫–∞ DatetimeIndex: {dt_error}")
            plt.close()
            return False
        
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –û—à–∏–±–∫–∞ DatetimeIndex –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
        print("‚úÖ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("‚úÖ Multi-Parameter Data Analyzer v2.0 –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_plotting_functionality()
    sys.exit(0 if success else 1)
