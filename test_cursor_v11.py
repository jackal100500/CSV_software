#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è –∫—É—Ä—Å–æ—Ä–∞ –≤ —Ä–µ–∂–∏–º–µ v1.1
—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã
"""

import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import subprocess
import os


def create_test_data_for_cursor():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Ä–∞–∑–Ω—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—É—Ä—Å–æ—Ä–∞"""
    
    # –ë–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è
    base_time = datetime(2025, 6, 12, 10, 0, 0)
    
    # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Ä–∞–∑–Ω—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
    data = {}
    
    # –°–∏—Å—Ç–µ–º–∞ A: –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ (20 —Ç–æ—á–µ–∫)
    data['Time_A'] = [base_time + timedelta(seconds=i*10) for i in range(20)]
    data['Temperature_A'] = np.random.normal(25.0, 2.0, 20)
    
    # –°–∏—Å—Ç–µ–º–∞ B: –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥ (15 —Ç–æ—á–µ–∫)
    data['Time_B'] = [base_time + timedelta(seconds=i*15) for i in range(15)]
    data['Pressure_B'] = np.random.normal(1.5, 0.1, 15)
    
    # –°–∏—Å—Ç–µ–º–∞ C: –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ (10 —Ç–æ—á–µ–∫)
    data['Time_C'] = [base_time + timedelta(seconds=i*30) for i in range(10)]
    data['Flow_C'] = np.random.normal(100.0, 5.0, 10)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
    data['Extra_1'] = ['extra'] * 20
    data['Extra_2'] = [1] * 20
    
    # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–ª–∏–Ω—ã –¥–ª—è DataFrame
    max_len = 20
    for key, values in data.items():
        if len(values) < max_len:
            data[key] = values + [None] * (max_len - len(values))
    
    df = pd.DataFrame(data)
    return df


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞"""
    print("üß™ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—É—Ä—Å–æ—Ä–∞ v1.1...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_df = create_test_data_for_cursor()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV
    test_file = "test_cursor_v11.csv"
    test_df.to_csv(test_file, index=False)
    
    print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {test_file}")
    print(f"üìä –°–æ–∑–¥–∞–Ω–æ {len(test_df)} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö")
    print(f"‚è∞ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã: Time_A (10—Å –∏–Ω—Ç–µ—Ä–≤–∞–ª), Time_B (15—Å –∏–Ω—Ç–µ—Ä–≤–∞–ª), Time_C (30—Å –∏–Ω—Ç–µ—Ä–≤–∞–ª)")
    print(f"üìà –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: Temperature_A, Pressure_B, Flow_C")
    
    print("\nüîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:")
    print(test_df.head().to_string())
    
    print("\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ graf_csv.py")
    print("2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª test_cursor_v11.csv")
    print("3. –í–∫–ª—é—á–∏—Ç–µ —Ä–µ–∂–∏–º v1.1 (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞—Ä—ã)")
    print("4. –°–æ–∑–¥–∞–π—Ç–µ –ø–∞—Ä—ã:")
    print("   - Time_A ‚Üí Temperature_A")
    print("   - Time_B ‚Üí Pressure_B") 
    print("   - Time_C ‚Üí Flow_C")
    print("5. –ü–æ—Å—Ç—Ä–æ–π—Ç–µ –≥—Ä–∞—Ñ–∏–∫")
    print("6. –î–≤–∏–≥–∞–π—Ç–µ –∫—É—Ä—Å–æ—Ä –ø–æ –≥—Ä–∞—Ñ–∏–∫—É –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:")
    print("   ‚úì –ö—É—Ä—Å–æ—Ä –¥–æ–ª–∂–µ–Ω –¥–≤–∏–≥–∞—Ç—å—Å—è –ø–æ –û–ë–™–ï–î–ò–ù–ï–ù–ù–û–ô –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª–µ")
    print("   ‚úì –ê –ù–ï —Ç–æ–ª—å–∫–æ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª–µ –ø–µ—Ä–≤–æ–π –ø–∞—Ä—ã (Time_A)")
    print("   ‚úì –î–æ–ª–∂–Ω—ã –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    print(f"\nüöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º PowerShell –¥–ª—è –∑–∞–ø—É—Å–∫–∞
        subprocess.Popen(['python', 'graf_csv.py'], shell=True)
        print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ graf_csv.py –≤—Ä—É—á–Ω—É—é")


if __name__ == "__main__":
    main()
