#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Multi-Parameter Data Analyzer v1.1
–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å—Ç–æ–ª–±—Ü–∞–º–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–∏
"""

import pandas as pd
import numpy as np
from datetime import datetime, timedelta

def create_test_data():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ä—è–¥–∞–º–∏"""
    
    # –ë–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è
    base_time = datetime(2025, 6, 12, 10, 0, 0)
    
    # –°–∏—Å—Ç–µ–º–∞ A - –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    times_a = [base_time + timedelta(seconds=30*i) for i in range(120)]  # 60 –º–∏–Ω—É—Ç
    temperature_a = 20 + 5 * np.sin(np.linspace(0, 4*np.pi, len(times_a))) + np.random.normal(0, 0.5, len(times_a))
    
    # –°–∏—Å—Ç–µ–º–∞ B - –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥, —Å–º–µ—â–µ–Ω–∏–µ –Ω–∞ 15 —Å–µ–∫—É–Ω–¥
    times_b = [base_time + timedelta(seconds=15 + 60*i) for i in range(60)]  # 60 –º–∏–Ω—É—Ç
    pressure_b = 100 + 10 * np.cos(np.linspace(0, 3*np.pi, len(times_b))) + np.random.normal(0, 1, len(times_b))
    
    # –°–∏—Å—Ç–µ–º–∞ C - –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
    times_c = [base_time + timedelta(minutes=2*i) for i in range(30)]  # 60 –º–∏–Ω—É—Ç
    flow_rate_c = 50 + 15 * np.sin(np.linspace(0, 2*np.pi, len(times_c))) + np.random.normal(0, 2, len(times_c))
    
    # –°–∏—Å—Ç–µ–º–∞ D - —Ç–µ –∂–µ –≤—Ä–µ–º–µ–Ω–∞ —á—Ç–æ —É A, –Ω–æ –¥—Ä—É–≥–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä
    humidity_d = 60 + 20 * np.cos(np.linspace(0, 5*np.pi, len(times_a))) + np.random.normal(0, 1, len(times_a))
    
    # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame
    max_len = max(len(times_a), len(times_b), len(times_c))
    
    data = {
        'timestamp_system_A': times_a + [None] * (max_len - len(times_a)),
        'temperature_A': list(temperature_a) + [None] * (max_len - len(times_a)),
        'humidity_A': list(humidity_d) + [None] * (max_len - len(times_a)),
        
        'timestamp_system_B': times_b + [None] * (max_len - len(times_b)),
        'pressure_B': list(pressure_b) + [None] * (max_len - len(times_b)),
        
        'timestamp_system_C': times_c + [None] * (max_len - len(times_c)),
        'flow_rate_C': list(flow_rate_c) + [None] * (max_len - len(times_c)),
    }
    
    df = pd.DataFrame(data)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ CSV
    filename = 'test_manual_pairs_v11_final.csv'
    df.to_csv(filename, index=False)
    print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {filename}")
    print(f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:")
    print(f"   - –°–∏—Å—Ç–µ–º–∞ A: {len(times_a)} –∑–∞–ø–∏—Å–µ–π (30—Å–µ–∫ –∏–Ω—Ç–µ—Ä–≤–∞–ª)")
    print(f"   - –°–∏—Å—Ç–µ–º–∞ B: {len(times_b)} –∑–∞–ø–∏—Å–µ–π (60—Å–µ–∫ –∏–Ω—Ç–µ—Ä–≤–∞–ª)")  
    print(f"   - –°–∏—Å—Ç–µ–º–∞ C: {len(times_c)} –∑–∞–ø–∏—Å–µ–π (2–º–∏–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª)")
    print(f"üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:")
    print(f"   timestamp_system_A ‚Üí temperature_A, humidity_A")
    print(f"   timestamp_system_B ‚Üí pressure_B")
    print(f"   timestamp_system_C ‚Üí flow_rate_C")
    
    return filename

if __name__ == "__main__":
    create_test_data()
